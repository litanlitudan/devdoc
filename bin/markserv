#!/usr/bin/env node

// This wrapper ensures ES modules work correctly when invoked via npm link
// We need to handle the case where __dirname is not available in ES modules

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { spawn } from 'child_process';
import { existsSync } from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const toBoolean = (value) => {
  if (!value) return false;
  const normalized = value.toString().toLowerCase();
  return normalized === '1' || normalized === 'true' || normalized === 'yes';
};

const legacyCandidates = [
  join(__dirname, '..', 'dist', 'cli.js'),
  join(__dirname, '..', 'dist', 'lib', 'cli.js')
];

const newCliPath = join(__dirname, '..', 'dist', 'src', 'cli', 'index.js');

const resolveLegacyCli = () => legacyCandidates.find((candidate) => existsSync(candidate));

const resolveCliPath = () => {
  // Default to new oclif CLI unless explicitly disabled
  const wantsLegacyCli = toBoolean(process.env.MARKSERV_USE_LEGACY_CLI);

  if (wantsLegacyCli) {
    const legacyCli = resolveLegacyCli();
    if (legacyCli) {
      return legacyCli;
    }
    console.warn('Warning: MARKSERV_USE_LEGACY_CLI is set but the legacy CLI was not found. Falling back to new CLI.');
  }

  // Try new CLI first (default behavior)
  if (existsSync(newCliPath)) {
    return newCliPath;
  }

  // Fallback to legacy CLI if new CLI not found
  const legacyCli = resolveLegacyCli();
  if (legacyCli) {
    console.warn('Warning: Using legacy CLI. Run `npm run build` to use the new oclif CLI.');
    return legacyCli;
  }

  throw new Error('Unable to locate markserv CLI entrypoint. Run `npm run build` before invoking the CLI.');
};

const cliPath = resolveCliPath();

// Pass through all arguments to the actual CLI
const args = process.argv.slice(2);

// Spawn node with the CLI script
const child = spawn(process.execPath, [cliPath, ...args], {
  stdio: 'inherit',
  env: process.env
});

// Pass through the exit code
child.on('exit', (code) => {
  process.exit(code || 0);
});

// Handle errors
child.on('error', (err) => {
  console.error('Failed to start markserv:', err);
  process.exit(1);
});
